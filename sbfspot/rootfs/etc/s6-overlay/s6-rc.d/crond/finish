#!/command/with-contenv bashio
# shellcheck shell=bash
# ==============================================================================
# Bushvin Add-on: sbfspot
# Take down the S6 supervision tree when the crond daemon fails
# ==============================================================================
declare exit_code
readonly exit_code_container=$(</run/s6-linux-init-container-results/exitcode)
readonly exit_code_service="${1}"
readonly exit_code_signal="${2}"
readonly service="crond"
readonly CONFIG_PATH=/data/options.json
declare SENSOR_ACTION
SENSOR_ACTION=$(bashio::config 'sensor_action' 'run')

bashio::log.level $(bashio::config 'log_level' 'info')

bashio::log.info \
  "Service ${service} exited with code ${exit_code_service}" \
  "(by signal ${exit_code_signal})"

. /usr/local/bin/lib-mqtt.sh
. /usr/local/bin/lib-sbfspot.sh

if test "${SENSOR_ACTION}" == "run"; then
    bashio::log.info "Marking device as offline"
    SBFspot::inverter.get_info
    MQTT::device.set_availability offline
fi

if [[ "${exit_code_service}" -eq 256 ]]; then
  if [[ "${exit_code_container}" -eq 0 ]]; then
    echo $((128 + $exit_code_signal)) > /run/s6-linux-init-container-results/exitcode
  fi
  [[ "${exit_code_signal}" -eq 15 ]] && exec /run/s6/basedir/bin/halt
elif [[ "${exit_code_service}" -ne 0 ]]; then
  if [[ "${exit_code_container}" -eq 0 ]]; then
    echo "${exit_code_service}" > /run/s6-linux-init-container-results/exitcode
  fi
  exec /run/s6/basedir/bin/halt
fi